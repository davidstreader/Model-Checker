buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
    }
}
import org.apache.tools.ant.taskdefs.condition.Os

static getNatives() {
    String ret = "resources/native/"

         if (Os.isFamily(Os.FAMILY_MAC))                   ret += "x86_64"
    else if (System.getProperty("os.arch").endsWith("64")) ret += "amd64"
    else if (System.getProperty("os.arch").endsWith("86")) ret += "x86"

         if (Os.isFamily(Os.FAMILY_WINDOWS)) ret+="-windows"
    else if (Os.isFamily(Os.FAMILY_MAC))     ret+="-macosx"
    else                                     ret+="-linux"

    return ret
}
/* As there is no runShadow this may be redundant
*/

plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

group   'net.modelchecker'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

mainClassName = 'mc.Main'

shadowJar {
    baseName       = 'ModelChecker'
    classifier     = null
    version        = null
    destinationDir = new File("../")
}

// I thing that maven is redundant
allprojects {
    apply plugin: 'idea'
    version = '1.0'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}
subprojects {
    apply plugin: 'java'
    apply from: "$rootDir/gradle/version.gradle"

    dependencies {
        if (project.name !=  'util') {
            compile project(':util')
        }
        testCompile 'junit:junit:4.12'
        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        compile     'uk.com.robust-it:cloning:1.9.3'
        compile     'com.google.guava:guava:21.0'
        compile     'org.apache.commons:commons-lang3:3.5'
        compile     'commons-io:commons-io:2.5'
        runtime fileTree(dir: 'libs', include: '*.jar')
    }

    sourceCompatibility = 1.8

    test {
        workingDir new File("../resources/")
        testLogging {
            showStandardStreams = true
        }
        systemProperty 'java.library.path', "$rootDir/" + natives
        environment    'PATH',              "$rootDir/" + natives
        environment    'LD_LIBRARY_PATH',   "$rootDir/" + natives
        environment    'DYLD_LIBRARY_PATH', "$rootDir/" + natives
    }
}

test {
    workingDir new File("resources/")
    testLogging {
        showStandardStreams = true
    }
    systemProperty 'java.library.path', "$rootDir/" + natives
    environment    'PATH',              "$rootDir/" + natives
    environment    'LD_LIBRARY_PATH',   "$rootDir/" + natives
    environment    'DYLD_LIBRARY_PATH', "$rootDir/" + natives
}

dependencies {
    compile project(':ast')
    compile project(':clientapplication')
    compile project(':compiler')
    compile project(':core')
    compile project(':evaluator')
    compile project(':interpreter')
    compile project(':operations')
    compile project(':parsing')
    compile project(':processmodels')
    compile project(':util')
}

sourceSets {
    main {
        resources {
            srcDirs 'resources'
            exclude '**/tests/**'
        }
    }
}

test.dependsOn 'cleanTest'
assemble.dependsOn shadowJar
